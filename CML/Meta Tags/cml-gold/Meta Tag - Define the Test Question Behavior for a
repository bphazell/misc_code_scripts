Meta Tag - Define the Test Question Behavior for a Field - cml:gold

- Used to specify the behavior of test questions for a form element
- Can only be a child tag of a form element

[code]
<cml:checkboxes label="Sample radio buttons:"> 
<cml:gold src="gold_column_name" strict="true" /> 
<cml:checkbox label="Checkbox 1" /> 
<cml:checkbox label="Checkbox 2" /> 
<cml:checkbox label="Checkbox 3" /> 
</cml:checkboxes>
[/code]

[code]
<cml:text label="Sample text field:"> 
<cml:gold regex="\\d+\." flags="i" no_escape="true" /> 
</cml:text>
[/code]

Attributes

[code]src[/code]
Specifies which column in the uploaded source data the test question information will be retrieved from. This is only necessary when creating test questions from a spreadsheet. 

[code]exact[/code]
If set to "true", the set of contributor responses must be identical to the set of pre-defined correct responses on a test question in order for that contributor's response to be considered correct. This only applies to [code]cml:text[/code] and [code]cml:textarea[/code] fields with [code]multiple="true"[/code] and [code]cml:checkboxes[/codes] fields. A contributor's response will not be considered correct if they include a response not found in the set of correct responses. For example, if responses "a", "b", and "c" are defined as correct in the test question data, then a contributor will only be correct if he/she submits "a", "b", and "c". Order does not matter.

[code]strict[/code]
If set to "true", every response submitted by a contributor must be included in the set of pre-defined correct responses on a test question in order for that contributor's response to be considered correct. Unlike [code]exact[/code], [code]strict[/code] allows contributors to omit responses that are part of the test question set. For example, if responses "a", "b", and "c" are defined as correct in the test question data, then a contributor will be considered correct if he/she submits only "a" and "b".

[code]matcher[/code]
Allows you to redefine how a contributor's reponses to test questions are evaluated. Normally, a contributor's responses must exactly match that of the stored test question answers. This attribute can be set to the following:

	- [code]matcher="not"[/code]
	This will reverse the normal behavior so that a contributor must answer anything but the pre-defined test question answer to be considered correct. For example, if answer "a" was stored in the test question data and the contributor selects answer "b" (or anything other than "a"), the contributor would get the test question correct.

	- [code]matcher="range"[/code]
	This allows you to specify a range that a contributor response can fall between. Specifying a minimum and maximum range will allow a greater threshold of acceptability when contributor answer tests questions that may have some variances. To define the minimum and maximum, you may set this within the test question interface, or within a spreadsheet with two headers named "column_name_min" and "column_name_max". Use of a number validator is recommended in conjunction with this matcher.

Regular Expressions Using cml:gold
Regular expressions can be used to create flexible criteria for test questions on [code]cml:text[/code] and [code]cml:textarea[/code] fields. Suppose you want to allow any response that contains the phrase 'foo bar' to be submitted in a text field:

	- Step 1: Inside your cml:text tag, add a cml:gold tag and its associated attributes.
	[code]
	<cml:text label="What words are sometimes used as placeholder names?" name="response">
	<cml:gold regex="{seed}" flags="i"></cml:gold>
	</cml:text>
	[/code]

	You can set the following regular expression attributes in your cml:gold tag:

	[code]regex[/code]
	The value of this attribute is the regular expression that a correct response should satisfy. The token [code]{seed}[/code] will be replaced with the value of the [code]'response_gold'[/code] field in your data when the regex attempts to match the response. For example, if you're trying to match 'foo bar', or another simple phrase, set [code]regex="{seed}"[/code] in your [code]cml:gold[/code] field, and set 'response_gold' to 'foo bar'.

	[code]flags[/code]
	In this attribute you can set modifiers that will change the behavior of the regular expression. Currently there are two values that are accepted:

		[code]flags="i"[/code]
		Makes the regex insensitive to case. For example, if you set the 'response_gold' field to 'foo bar' but also want to accept 'Foo bar', the capital F will not cause the match to fail.

		[code]flags="m"[/code]
		If you are expecting to receive multiple line responses, the 'm' flag will ensure that the entire response is evaluated. This is essential for copy/paste jobs.

	If you would like to utilize both flags simultaneously, use [code]flags="im"[/code]

	[code]no_escape[/code]
	When the 'response_gold' for your unit is substituted for [code]{seed}[/code] in the regular expression, any special or illegal regular expression characters are escaped. For example, "|" is considered a special character in regular expressions. By default, it will be escaped and lose its special meaning unless [code]no_escape="true"[/code].

	Example: If you wanted to match either 'first base', 'second base', or 'third base', you might try setting 'response_gold' to [code]'(first|second|third) base'[/code]. This would not work since the special characters would be escaped and only the literal string [code]'(first|second|third) base'[/code] would be matched. Setting [code]no_escape="true"[/code] would have the desired effect, allowing any of the three options as a correct response.

	- Step 2: Add the test question data column to your input spreadsheet or in the test question creation interface.

	Let's say you name your regex text field 'response'. In your input data, you will need to add a 'response_gold' column and populate it with the phrase or pattern to match for each unit. Your spreadsheet might look like this:
	<table>
		<tr>
			<th>query</th>
			<th>response_gold</th>
		</tr>
			<td>Most popular sports in the United States?</td>
			<td>baseball|football|basketball</td>
		<tr>
			<td>The largest political parties in the United States?</td>
			<td>Republican|Democratic</td>
		</tr>
		<tr>
			<td>Pet names for your children?</td>
			<td>sweetie|toots|sugarpie</td>
		</tr>
	</table>

	Creating test questions can be done as usual, except you have to be conscious of using regular expression special characters and escaping characters if needed.











