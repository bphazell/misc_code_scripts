Validations

CML supports a number of pre-made validation methods to ensure data integrity. Some validators normalize the input, making it possible to create test questions for complex data like phone numbers, addresses, and URLs. You can add validators by specifying a [code]validates[/code] attribute on your CML form element:

[code]
<cml:checkboxes label="Pick one" validates="required"> 
<cml:checkbox label="This one is the best" /> 
<cml:checkbox label="The first one is lying" /> 
</cml:checkboxes>
[/code]

[code]
<cml:text label="My text box" validates="required usAddress"/>
[/code]

Validators are run from left to right, stopping on the first failure. For example, the above [code]cml:text[/code] field would validate [code]required[/code] first and then, if that validator passes, move on to [code]usAddress[/code] and run that validation.

All validators run on "blur" and "submit" events, which means clicking out of a text field will run the set of validators. The [code]required[/code] validator, however, runs only on "submit". Failed validators block submission of the form.

Hidden fields (both of type [code]hidden[/code] and those contained in elements with [code]display: none;[/code] styling are not validated.)

General Validators

[code]required[/code]
On a free text input, at least one non-whitespace character must be present. On a multiple choice or drop-down field, at least one item must be selected.

[code]ss-required[/code]
Unlike [code]required[/code] validation, which verifies a contributor has submitted an answer by using the Javascript in your job, [code]ss-required[/code] verifies the answer has reached the server. For more on how and when to use [code]ss-required[/code], please take a look at this article.

Number Validators

[code]integer[/code]
Requires an integer value, e.g., 10, -5

[code]positiveInteger[/code]
Requires a positive integer value, e.g., 10, 5

[code]numeric[/code]
Requires an integer or floating-point value, e.g., 10, 1.5, -2.4

[code]digits[/code]
Allows only numbers and punctuation, e.g., "10:10-99", "100(2)"

[code]integerRange[/code]
Ensures that the contributor inputs an integer within a given range. Note: The values are inclusive.
[code]
<cml:text label="A number between 1 and 100, inclusive" validates="integerRange:{min:1,max:100}" />
[/code]

Text Validators
[code]alpha[/code]
Requires only letters, e.g., "ABCabc"

[code]alphanum[/code]
Allows only numbers and letters, e.g., "ahfd723nd"

[code]date[/code]
Requires a date in MM/DD/YYYY format, e.g., "01/21/2010"

[code]minLength[/code]
Ensures that the user's input is at least a certain number of characters long.
[code]
<cml:text label="4 or more characters" validates="minLength:4"/>
[/code]

[code]maxLength[/code]
Ensures that the user's input is, at most, a given number of characters long.
[code]
<cml:text label="32 or fewer characters" validates="maxLength:32"/>
[/code]

[code]rangeLength[/code]
Ensures that the user's input is within a given length range. Note: The values are inclusive.
[code]
<cml:text label="5 to 32 characters long" validates="rangeLength:{min:5,max:32}"/>
[/code]

[code]currencyDollar[/code]
Allows only a dollar amount, e.g., "$153.40"

[code]currency[/code]
Allows only monetary amounts with a valid currency symbol or currency code. e.g. "£1.500,57", "1,200 DKK". Both commas and periods are accepted as valid digit group delimiters and most international currency codes and symbols are recognized. Currency amounts are normalized to "¥1,200" or "1,200.00 JPY" -style formatting. If a list of currency codes and/or symbols is provided, valid currency types are restricted to those provided.
[code]
<cml:text label="Valid currency amount" validates="currency"/>
[/code]
[code]
<cml:text label="Valid USD or GBP amount" validates="currency:['$','£','USD','GBP']"/>
[/code]

[code]regex[/code]
Allows you to validate contributor input against any arbitrary regular expression allowed in JavaScript. Because the regular expression is embedded in an HTML attribute, the following HTML entities will need to be escaped:
 - < → &lt;
 - > → &gt;
 - " → &quot;

The [code]regex[/code] validator makes use of attributes to specify the regular expression, its flags, and its behavior:

	[code]data-validates-regex[/code]
	The actual regular expression. Remember that the above three special characters need to be escaped as HTML entities.

	[code]data-validates-regex-flags[/code]
	Any combination of the standard three regular expression flags. In the context of a validator, only "i" (case-insensitive matching) and "m" (multiline matching of ^ and $) are useful. "g" will have no real effect.

	[code]data-validates-regex-message[/code]
	A custom "validation failed message". The default message is "This value didn't match the expected rules."

Examples:
[code]
<!-- Case-sensitive regular expression. Passes: "-123" --> 
<cml:text label="Negative number" validates="regex" data-validates-regex="^-\d+" /> 
[/code]

[code]
<!-- Regular expression for any alphanumeric characters and spaces. Passes: "-123" --> 
<cml:text label="Input text here" validates="regex" data-validates-regex="^[A-Za-z\s]+$" />
[/code]
 
[code]
<!-- Case-insensitive regular expression. Passes: "<a>", "<FONT>" --> 
<cml:text label="HTML tag" validates="regex" data-validates-regex="\&lt;[a-z]+&gt;" data-validates-regex-flags="i" />
[/code]

[code]
<!-- Custom failure message.--> <cml:text label="Vowel" validates="regex" data-validates-regex="^[aeiouy]$"  data-validates-regex-message="Please enter a vowel." />
[/code]

[code]
<!-- Pass only if the regex *doesn't* match the contributor input.--> 
<cml:text label="Consonant" validates="regex:'nomatch'"  data-validates-regex="^[aeiouy]$"
[/code]

​​Learn regular expressions with simple, interactive examples online at RegExOne.com

Web Validators

[code]email[/code]
Requires a valid-looking email address, e.g., "bob@example.com"

[code]url[/code]
Requires a valid-looking URL, e.g., "http://crowdflower.com." This validator performs some normalization of the entered URL to make it more useful for gold-digging but also submits the user's original input. The normalization includes removing "www.", changing "https://" to "http://", removing index pages such as "index.html" and "home.html," and adding a trailing slash when needed. The [code]url[/code] validator accepts the following optional restrictions:

	[code]google[/code] - Requires a google.___ domain
	[code]non-google[/code] - Forbids a google.___ domain.
	[code]non-search[/code] - Forbids most major search domains (Google, Bing, Yahoo, Yelp, etc.)
	[code]domainonly[/code] - Strips the entry of everything except the domain.

Examples:
[code]
<cml:text label="Non-Google Site" validates="required url:['non-google']" /> 
[/code]
[code]
<cml:text label="Domain Only" validates="required url:{domainonly:true}" />
[/code]

The [code]url[/code] validator submits the following additional data:

	[code]{fieldname}_contributor_input[/code] - the raw contributor input.


[code]urlImage[/code]
Requires a URL for a valid image. This validator executes an asynchronous request to validate that the URL points to a valid image. This validator does no "cleaning" of the contributor's input.

Address Validators

[code]stateAbbr[/code]
Requires a valid US state abbreviation, e.g., "CA", "NY"

[code]zipcode[/code]
Requires a valid US zip code, e.g., "94103"

[code]frAddress[/code]
Requires a valid address and returns French address components. Unlike the US address validator, the French address validator does not enforce a level of specificity in the address. (However, this can still be enforced via Gold). This validator uses the Google Maps API to return a valid, cleaned address in the French format: "123 Rue de Bercy, Paris, 75012, France".
Although this address validator is specifically geared towards addresses in France, it does not prevent contributors from entering addresses from other countries. Use Gold to ensure that contributors don't give you non-French addresses.
In addition to the full normalized address, this validator submits the following components as separate fields (these appear as extra columns in your CSV reports):

	[code]{fieldname}_contributorInput[/code] - raw contributor input (before normalization)
	
	[code]{fieldname}_street[/code] - street address (eg., "123 Rue de Bercy")

	[code]{fieldname}_buildingLabel[/code] - building/unit label (eg., "Suite", "Unit")

	[code]{fieldname}_buildingNumnber[/code] - building/unit number (eg., "A", "1C")

	[code]{fieldname}_city[/code] - town / city (eg. "Paris")

	[code]{fieldname}_postcode[/code] - postal code (eg. "75012")

	[code]{fieldname}_country[/code] - country (eg. "France")


[code]usAddress2[/code]
Requires a valid, specific address and returns US address components. This validator requires the contributor to enter an address that is specific to the building level. It uses the Google Maps API to return a valid, cleaned address in the US format: "455 Valencia St, San Francisco, CA, 94103, USA".
Although this address validator is specifically geared towards US addresses, it does not prevent contributors from entering addresses from other countries. Use Gold to ensure that contributors don't give you non-US addresses.
In addition to the full normalized address, this validator submits the following components as separate fields (these appear as extra columns in your CSV reports):

	[code]{fieldname}_contributorInput[/code] - raw contributor input (before normalization)

	[code]{fieldname}_street[/code] - street address (eg., "455 Valencia St")

	[code]{fieldname}_buildingLabel[/code] - building/unit label (eg., "Suite", "Unit")

	[code]{fieldname}_buildingNumnber[/code] - building/unit number (eg., "A", "1C")

	[code]{fieldname}_city[/code] - town / city (eg., "San Francisco")
	
	[code]{fieldname}_state[/code] - two-letter state abbreviation (eg., "CA")
	
	[code]{fieldname}_zip[/code] - postal code (eg., "94103")
	
	[code]{fieldname}_country[/code] - country (eg., "USA")


[code]ukAddress[/code]
Requires a valid address and returns UK address components. Unlike the US address validator, the UK address validator does not enforce a level of specificity in the address. (However, this can still be enforced via Gold). This validator uses the Google Maps API to return a valid, cleaned address in the UK format: "123 Brookdale, Enfield, Greater London, N11 1, United Kingdom".
Although this address validator is specifically geared towards UK addresses, it does not prevent contributors from entering addresses from other countries. Use Gold to ensure that contributors don't give you non-UK addresses.
In addition to the full normalized address, this validator submits the following components as separate fields (these appear as extra columns in your CSV reports):

	[code]{fieldname}_contributorInput[/code] - raw contributor input (before normalization)

	[code]{fieldname}_route[/code] - street address (eg. "123 Brookdale")

	[code]{fieldname}_buildingLabel[/code] - building/unit label (eg. "Suite", "Unit")

	[code]{fieldname}_buildingNumnber[/code] - building/unit number (eg. "A", "1C")

	[code]{fieldname}_post_town[/code] - town / city (eg. "London")

	[code]{fieldname}_postcode[/code] - postal code (eg. "N11 1")

	[code]{fieldname}_country[/code] - country (eg. "United Kingdom")


Special Validators

[code]clean[/code]
Cleans the contributor's input. The contributor can never "fail" this validator as it does not actually validate anything, it simply cleans their input. You can use any combination of the following cleaners:

	[code]trim[/code] - Removes leading and trailing whitespace.
	
	[code]titlecase[/code] - Capitalizes all words that are not all uppercase nor most conjunctions.
	
	[code]uppercase[/code] - Replaces all lowercase letters with uppercase letters.
	
	[code]lowercase[/code] - Replaces all uppercase letters with lowercase letters.
	
	[code]whitespace[/code] - Removes all whitespace from the input.
	
	[code]multipleWhitespace[/code] - Replaces all consecutive whitespace with a single space. (For example, multiple spaces and newlines in a row will get replaced with a single space.)

Cleaners are processed in the order that they are defined.

Examples:
[code]
<cml:text label="Titlecase" validates="required clean:['titlecase']" /> 
[/code]
[code]
<cml:text label="Trimmed and Lowercased" validates="required clean:['trim','titlecase']" />
[/code]

[code]user_agent[/code]
This simply sets the input's value to the contributor's user-agent string. This is useful for debugging. For example, if you're asking users to evaluate your site, you can use this validator to help diagnose complaints about broken pages. This should be used only in [code]cml:hidden[/code] tags.


















